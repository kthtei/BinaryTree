/** Checks if sum of a binary tree path can be int sum. */
class PathSum {
    public boolean hasPathSum(TreeNode root, int sum) {
        if (root == null) return false;
        if (root.left == null && root.right == null) {
            return sum == root.val;
        }
        if (root.right == null) return hasPathSumHelper(root.left, sum - root.val);
        if (root.left == null)  return hasPathSumHelper(root.right, sum - root.val);
        return hasPathSumHelper(root.left, sum - root.val) || hasPathSumHelper(root.right, sum - root.val);
    }
    
    private boolean hasPathSumHelper(TreeNode root, int sum) {
        boolean left = false;
        boolean right = false;
        boolean result = false;
        if (root.left != null) left = hasPathSumHelper(root.left, sum - root.val);
        if (root.right != null) right = hasPathSumHelper(root.right, sum - root.val);
        if (root.left == null && root.right == null) {
            sum -= root.val;
            return result = sum == 0;
        }
        return left || right;
    }
}

/** simplified solution. */
class PathSum2 {
    public boolean hasPathSum(TreeNode root, int sum) {
        if (root == null) return false;
        if (root.left == null && root.right == null && sum - root.val == 0) return true;
        return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);
    }
}
