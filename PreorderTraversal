
public class PreorderTraversal {
    /** Using Morris Traversal logic. */
    public List<Integer> MorrisPreorderTraversal1(TreeNode root) {
        TreeNode cur = root;
        List<Integer> list = new ArrayList<>();
        if (cur == null) return list;
        while (cur != null) {
            if (cur.left == null) {
                list.add(cur.val);
                cur = cur.right;
            } else {
                TreeNode prev = cur.left;
                while (prev.right != null && prev.right != cur) prev = prev.right;
                if (prev.right == null) {
                    list.add(cur.val);
                    prev.right = cur;
                    cur = cur.left;
                } else {
                    prev.right = null;
                    cur = cur.right;
                }
            }
        }
        return list;
    }
    
    /** Using recursive traversal method. */
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        helper(root, list);
        return list;
    }
    
    /** Helper method for recursion. */
    private void helper(TreeNode root, List<Integer> list) {        
        if (root != null) {
            if (root.left != null && root.right != null) list.add(root.val);
            else list.add(root.val); 
            if (root.left != null) {                
                helper(root.left, list);
            }
            
            if (root.right != null) {
                helper(root.right, list);
            }                  
        }        
    }
}


class TreeNode {
  int val;
  TreeNode left;
  TreeNode right;
  TreeNode(int val) {
    this.val = val;
  }
}
