public class InorderTraversal {
    /** Using Morris Traversal Logic. */
    public List<Integer> MorrisInorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        TreeNode cur = root;
        TreeNode prev, tmp;
        while (cur != null) {
            if (cur.left == null) {
                list.add(cur.val);
                cur = cur.right;
            } else {
                prev = cur.left;
                while (prev.right != null) prev = prev.right;
                prev.right = cur;
                tmp = cur;
                cur = cur.left;
                tmp.left = null;
            }
        }
        return list;
    }
    
    /** Using recursive method. */    
    public List<Integer> recursiveInorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        helper(root, list);
        return list;
    }
    
    /** Helper. */
    private void helper(TreeNode root, List<Integer> list) {        
        if (root != null) {            
            helper(root.left, list);
            list.add(root.val);
            helper(root.right, list);
        }        
    }      
}

class TreeNode {
  int val;
  TreeNode left, right;
  TreeNode(int val) {
    this.val = val;
  }
}
